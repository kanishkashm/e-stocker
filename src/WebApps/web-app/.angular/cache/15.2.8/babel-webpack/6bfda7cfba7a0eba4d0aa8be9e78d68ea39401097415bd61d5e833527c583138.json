{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { from, switchMap } from 'rxjs';\nimport { Constants } from '../const';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class AuthInterceptorService {\n  constructor(_authService) {\n    this._authService = _authService;\n  }\n  intercept(req, next) {\n    console.log();\n    if (req.url.startsWith(Constants.apiRoot)) {\n      console.log(\"intercept if\");\n      // return from(\n      //   this._authService.getAccessToken()\n      //   .then(token => {\n      //     const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n      //     const authRequest = req.clone({ headers });\n      //     const a = next.handle(authRequest).toPromise();\n      //     return next.handle(authRequest).toPromise() as HttpEvent<any>;\n      //   })\n      // );\n      return from(this._authService.getAccessToken()).pipe(switchMap(token => {\n        const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n        const authRequest = req.clone({\n          headers\n        });\n        return next.handle(authRequest);\n      }));\n    } else {\n      console.log(\"intercept else\");\n      return next.handle(req);\n    }\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAiCA,WAAW,QAAsC,sBAAsB;AAExG,SAAqBC,IAAI,EAAEC,SAAS,QAAQ,MAAM;AAElD,SAASC,SAAS,QAAQ,UAAU;;;AAKpC,OAAM,MAAOC,sBAAsB;EAEjCC,YAAoBC,YAAyB;IAAzB,iBAAY,GAAZA,YAAY;EAAiB;EAEjDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChDC,OAAO,CAACC,GAAG,EAAE;IACb,IAAGH,GAAG,CAACI,GAAG,CAACC,UAAU,CAACV,SAAS,CAACW,OAAO,CAAC,EAAC;MACvCJ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,OAAOV,IAAI,CAAC,IAAI,CAACK,YAAY,CAACS,cAAc,EAAE,CAAC,CAC9CC,IAAI,CACHd,SAAS,CAACe,KAAK,IAAG;QAChB,MAAMC,OAAO,GAAG,IAAIlB,WAAW,EAAE,CAACmB,GAAG,CAAC,eAAe,EAAE,UAAUF,KAAK,EAAE,CAAC;QACzE,MAAMG,WAAW,GAAGZ,GAAG,CAACa,KAAK,CAAC;UAAEH;QAAO,CAAE,CAAC;QAC1C,OAAOT,IAAI,CAACa,MAAM,CAACF,WAAW,CAAC;MACjC,CAAC,CAAC,CACH;KACF,MACI;MACHV,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,OAAOF,IAAI,CAACa,MAAM,CAACd,GAAG,CAAC;;EAE3B;;AA9BWJ,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAmB,SAAtBnB,sBAAsB;EAAAoB,YAFrB;AAAM","names":["HttpHeaders","from","switchMap","Constants","AuthInterceptorService","constructor","_authService","intercept","req","next","console","log","url","startsWith","apiRoot","getAccessToken","pipe","token","headers","set","authRequest","clone","handle","factory","providedIn"],"sourceRoot":"","sources":["D:\\Study\\e-stocker\\src\\WebApps\\web-app\\src\\app\\core\\services\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, from, switchMap } from 'rxjs';\nimport { AuthService } from './auth.service';\nimport { Constants } from '../const';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n\n  constructor(private _authService: AuthService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    console.log()\n    if(req.url.startsWith(Constants.apiRoot)){\n      console.log(\"intercept if\");\n      // return from(\n      //   this._authService.getAccessToken()\n      //   .then(token => {\n      //     const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n      //     const authRequest = req.clone({ headers });\n      //     const a = next.handle(authRequest).toPromise();\n      //     return next.handle(authRequest).toPromise() as HttpEvent<any>;\n      //   })\n      // );\n      return from(this._authService.getAccessToken())\n      .pipe(\n        switchMap(token => {\n          const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n          const authRequest = req.clone({ headers });\n          return next.handle(authRequest)\n        })\n      );\n    }\n    else {\n      console.log(\"intercept else\");\n      return next.handle(req);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}